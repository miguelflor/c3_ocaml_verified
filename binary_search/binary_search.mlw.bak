module BinarySearch
    use int.ComputerDivision
    use int.Int
    use ref.Refint

    use export array.Array
    
   let binary_search (l: array int) (x: int): bool
    requires { forall i1 i2. 0 <= i1 < i2 < length l -> l[i1] <= l[i2]}
    ensures { (result = True) <-> (length l > 0 /\ exists i. 0 <= i < length l /\ l[i] = x) }
  = 
    if length l <= 0 then
      false
    else
      let ref low = 0 in
      let ref high = (length l) - 1 in
      let ref found = false in
      
      while low <= high && not found do

        invariant { 0 <= low /\ high < length l }



        invariant {forall i. 0 <= i < low -> l[i] < x}
        invariant {forall i. high < i < length l -> l[i] > x}

        variant { if found then 0 else high - low + 1 } 
        
        let mid = low + div (high - low) 2 in

        
        if l[mid] = x then
          found := true
        else if l[mid] < x then
          low := mid + 1
        else
          high := mid - 1
        
      done;
      found
end
            