<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE why3session PUBLIC "-//Why3//proof session v5//EN"
"https://www.why3.org/why3session.dtd">
<why3session shape_version="6">
<prover id="0" name="CVC5" version="1.1.2" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="1" name="CVC4" version="1.8" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="2" name="Alt-Ergo" version="2.6.0" timelimit="1" steplimit="0" memlimit="1000"/>
<prover id="3" name="Z3" version="4.13.0" timelimit="1" steplimit="0" memlimit="1000"/>
<file format="ocaml">
<path name=".."/><path name="c3.ml"/>
<theory name="C3">
 <goal name="Make.list_seq_mem" proved="true">
 <transf name="intros" proved="true" arg1="l">
  <goal name="list_seq_mem.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l">
   <goal name="list_seq_mem.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="list_seq_mem.0.0.0" proved="true">
    <proof prover="3"><result status="valid" time="0.069492" steps="145025"/></proof>
    </goal>
    <goal name="list_seq_mem.0.0.1" proved="true">
    <proof prover="3"><result status="valid" time="0.049514" steps="116812"/></proof>
    </goal>
    <goal name="list_seq_mem.0.0.2" proved="true">
    <proof prover="1"><result status="valid" time="0.748245" steps="107536"/></proof>
    </goal>
    <goal name="list_seq_mem.0.0.3" proved="true">
    <proof prover="2"><result status="valid" time="0.124082" steps="706"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.is_removed_not_mem" proved="true">
 <proof prover="2"><result status="valid" time="0.222332" steps="1312"/></proof>
 </goal>
 <goal name="Make.is_removed_length_for_lists" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="is_removed_length_for_lists.0" proved="true">
  <transf name="unfold" proved="true" arg1="is_removed" arg2="in" arg3="H2">
   <goal name="is_removed_length_for_lists.0.0" proved="true">
   <proof prover="1"><result status="valid" time="0.467292" steps="74708"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.is_removed_length" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="is_removed_length.0" proved="true">
  <transf name="unfold" proved="true" arg1="is_removed" arg2="in" arg3="H1">
   <goal name="is_removed_length.0.0" proved="true">
   <proof prover="1"><result status="valid" time="0.257034" steps="43431"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sum_lengths_of_lists_l_e" proved="true">
 <transf name="intros" proved="true" arg1="l">
  <goal name="sum_lengths_of_lists_l_e.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l">
   <goal name="sum_lengths_of_lists_l_e.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sum_lengths_of_lists_l_e.0.0.0" proved="true">
    <proof prover="3"><result status="valid" time="0.064516" steps="146656"/></proof>
    </goal>
    <goal name="sum_lengths_of_lists_l_e.0.0.1" proved="true">
    <transf name="destruct_term" proved="true" arg1="r">
     <goal name="sum_lengths_of_lists_l_e.0.0.1.0" proved="true">
     <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="0.635112" steps="8402"/></proof>
     </goal>
     <goal name="sum_lengths_of_lists_l_e.0.0.1.1" proved="true">
     <proof prover="3"><result status="valid" time="0.055987" steps="164159"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sum_lengths_of_lists_l" proved="true">
 <transf name="intros" proved="true" arg1="l">
  <goal name="sum_lengths_of_lists_l.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="l">
   <goal name="sum_lengths_of_lists_l.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sum_lengths_of_lists_l.0.0.0" proved="true">
    <proof prover="3"><result status="valid" time="0.062684" steps="146110"/></proof>
    </goal>
    <goal name="sum_lengths_of_lists_l.0.0.1" proved="true">
    <transf name="destruct_term" proved="true" arg1="r">
     <goal name="sum_lengths_of_lists_l.0.0.1.0" proved="true">
     <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="3.110475" steps="22855"/></proof>
     </goal>
     <goal name="sum_lengths_of_lists_l.0.0.1.1" proved="true">
     <proof prover="3"><result status="valid" time="0.066523" steps="167880"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.sum_lengths_is_positive" proved="true">
 <transf name="intros" proved="true" arg1="ll">
  <goal name="sum_lengths_is_positive.0" proved="true">
  <transf name="induction_arg_ty_lex" proved="true" arg1="ll">
   <goal name="sum_lengths_is_positive.0.0" proved="true">
   <transf name="split_vc" proved="true" >
    <goal name="sum_lengths_is_positive.0.0.0" proved="true">
    <proof prover="2"><result status="valid" time="0.039725" steps="14"/></proof>
    </goal>
    <goal name="sum_lengths_is_positive.0.0.1" proved="true">
    <proof prover="3"><result status="valid" time="0.057681" steps="127061"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.distinct_head_not_in_tail" proved="true">
 <proof prover="0"><result status="timeout" time="1.000000" steps="128667"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="193511"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="13968"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="2433063"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="distinct_head_not_in_tail.0" proved="true">
  <proof prover="2"><result status="valid" time="0.261892" steps="2945"/></proof>
  </goal>
  <goal name="distinct_head_not_in_tail.1" proved="true">
  <proof prover="1" timelimit="5" memlimit="2000"><result status="valid" time="1.935947" steps="382944"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.is_removed_preserves_distinct">
 <proof prover="0"><result status="timeout" time="1.000000" steps="96623"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="186803"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="12481"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1649236"/></proof>
 <transf name="split_vc" >
  <goal name="is_removed_preserves_distinct.0">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="372105"/></proof>
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="871127"/></proof>
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="52244"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="2714798"/></proof>
  <transf name="inline_goal" >
   <goal name="is_removed_preserves_distinct.0.0">
   <transf name="split_all_full" >
    <goal name="is_removed_preserves_distinct.0.0.0">
    <proof prover="0"><result status="timeout" time="1.000000" steps="155667"/></proof>
    <proof prover="1"><result status="timeout" time="1.000000" steps="141964"/></proof>
    <proof prover="2"><result status="timeout" time="1.000000" steps="9762"/></proof>
    <proof prover="3"><result status="timeout" time="1.000000" steps="2195230"/></proof>
    <transf name="split_vc" >
     <goal name="is_removed_preserves_distinct.0.0.0.0">
     <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="401814"/></proof>
     <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="499128"/></proof>
     <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="47064"/></proof>
     <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="4.333735" steps="9951309"/></proof>
     <transf name="inline_goal" >
      <goal name="is_removed_preserves_distinct.0.0.0.0.0">
      <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1273095"/></proof>
      <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="2636917"/></proof>
      <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="327051"/></proof>
      <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="22934141"/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.length_strictly_decreases_if_element_removed">
 <proof prover="0"><result status="timeout" time="1.000000" steps="138833"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="184982"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="12960"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1668109"/></proof>
 <transf name="split_vc" >
  <goal name="length_strictly_decreases_if_element_removed.0">
  <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1244705"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="4647021"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="201325"/></proof>
  <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="15552312"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.is_valid_on_tail" proved="true">
 <proof prover="3"><result status="valid" time="0.024416" steps="115334"/></proof>
 </goal>
 <goal name="Make.is_candidate_on_distinct">
 <proof prover="0"><result status="timeout" time="1.000000" steps="131913"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="155771"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="9190"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="2487658"/></proof>
 <transf name="split_vc" >
  <goal name="is_candidate_on_distinct.0">
  <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1333358"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="4224746"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="221692"/></proof>
  <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="21066359"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.in_list_not_in_head_must_be_in_tail" proved="true">
 <proof prover="3"><result status="valid" time="0.038178" steps="147301"/></proof>
 </goal>
 <goal name="Make.candidate_is_only_head">
 <proof prover="0"><result status="timeout" time="1.000000" steps="98602"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="141580"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="10632"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1868411"/></proof>
 <transf name="split_vc" >
  <goal name="candidate_is_only_head.0" proved="true">
  <proof prover="3"><result status="valid" time="0.044216" steps="175761"/></proof>
  </goal>
  <goal name="candidate_is_only_head.1">
  <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1169084"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="4075047"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="223163"/></proof>
  <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="24.910812" steps="33609050"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.candidate_is_always_first">
 <proof prover="0"><result status="timeout" time="1.000000" steps="134519"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="139933"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="8844"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="2259076"/></proof>
 <transf name="split_vc" >
  <goal name="candidate_is_always_first.0">
  <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1846296"/></proof>
  <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="3679418"/></proof>
  <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="197747"/></proof>
  <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="25.248413" steps="31673282"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.if_linearization_is_possible_is_acyclic">
 <proof prover="0"><result status="timeout" time="1.000000" steps="124020"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="135734"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="31549"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1571050"/></proof>
 <transf name="split_vc" >
  <goal name="if_linearization_is_possible_is_acyclic.0">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="372723"/></proof>
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="745277"/></proof>
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="65491"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="7157080"/></proof>
  <transf name="inline_goal" >
   <goal name="if_linearization_is_possible_is_acyclic.0.0">
   <transf name="split_all_full" >
    <goal name="if_linearization_is_possible_is_acyclic.0.0.0">
    <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="401892"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="585922"/></proof>
    <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="70079"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="8475370"/></proof>
    <transf name="inline_goal" >
     <goal name="if_linearization_is_possible_is_acyclic.0.0.0.0">
     <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1627391"/></proof>
     <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="4365317"/></proof>
     <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="197981"/></proof>
     <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="13099613"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.acyclic_is_ordered">
 <proof prover="0"><result status="timeout" time="1.000000" steps="147496"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="126611"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="7666"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1236268"/></proof>
 <transf name="split_vc" >
  <goal name="acyclic_is_ordered.0">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="412727"/></proof>
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="1016782"/></proof>
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="30637"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="3485580"/></proof>
  <transf name="inline_goal" >
   <goal name="acyclic_is_ordered.0.0">
   <transf name="split_all_full" >
    <goal name="acyclic_is_ordered.0.0.0">
    <proof prover="0"><result status="timeout" time="1.000000" steps="152732"/></proof>
    <proof prover="1"><result status="timeout" time="1.000000" steps="127922"/></proof>
    <proof prover="2"><result status="timeout" time="1.000000" steps="7656"/></proof>
    <proof prover="3"><result status="timeout" time="1.000000" steps="2283916"/></proof>
    <transf name="split_vc" >
     <goal name="acyclic_is_ordered.0.0.0.0">
     <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="378385"/></proof>
     <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="401807"/></proof>
     <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="29433"/></proof>
     <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="4.345207" steps="8124222"/></proof>
     <transf name="inline_goal" >
      <goal name="acyclic_is_ordered.0.0.0.0.0">
      <proof prover="0" timelimit="30" memlimit="4000"><undone/></proof>
      <proof prover="1" timelimit="30" memlimit="4000"><undone/></proof>
      <proof prover="2" timelimit="30" memlimit="4000"><undone/></proof>
      <proof prover="3" timelimit="30" memlimit="4000"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.acyclic_has_head_candidate">
 <proof prover="0"><result status="timeout" time="1.000000" steps="125148"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="141036"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="17581"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1883350"/></proof>
 <transf name="split_vc" >
  <goal name="acyclic_has_head_candidate.0">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="332768"/></proof>
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="740832"/></proof>
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="105881"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="4.389350" steps="7744235"/></proof>
  <transf name="inline_goal" >
   <goal name="acyclic_has_head_candidate.0.0">
   <transf name="split_all_full" >
    <goal name="acyclic_has_head_candidate.0.0.0">
    <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="412079"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="590167"/></proof>
    <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="61287"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="7079880"/></proof>
    <transf name="inline_goal" >
     <goal name="acyclic_has_head_candidate.0.0.0.0">
     <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1514256"/></proof>
     <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="2040183"/></proof>
     <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="267179"/></proof>
     <proof prover="3" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="33893526"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.acyclic_and_has_candidate">
 <proof prover="0"><result status="timeout" time="1.000000" steps="95742"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="163463"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="4059"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="2581440"/></proof>
 <transf name="split_vc" >
  <goal name="acyclic_and_has_candidate.0">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="330844"/></proof>
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="744204"/></proof>
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="23338"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="4.346708" steps="8440299"/></proof>
  <transf name="inline_goal" >
   <goal name="acyclic_and_has_candidate.0.0">
   <transf name="split_all_full" >
    <goal name="acyclic_and_has_candidate.0.0.0">
    <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="342626"/></proof>
    <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="716812"/></proof>
    <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="43732"/></proof>
    <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="4.385902" steps="8635778"/></proof>
    <transf name="inline_goal" >
     <goal name="acyclic_and_has_candidate.0.0.0.0">
     <proof prover="0" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1395894"/></proof>
     <proof prover="1" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="1992291"/></proof>
     <proof prover="2" timelimit="30" memlimit="4000"><result status="timeout" time="30.000000" steps="260616"/></proof>
     <proof prover="3" timelimit="30" memlimit="4000"><result status="outofmemory" time="26.688898"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.remove_preserves_order">
 <proof prover="0"><result status="timeout" time="1.000000" steps="114188"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="179837"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="8671"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1847120"/></proof>
 <transf name="split_vc" >
  <goal name="remove_preserves_order.0">
  <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="408836"/></proof>
  <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="704750"/></proof>
  <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="41452"/></proof>
  <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="4.380853" steps="8132032"/></proof>
  <transf name="inline_goal" >
   <goal name="remove_preserves_order.0.0">
   <transf name="split_all_full" >
    <goal name="remove_preserves_order.0.0.0">
    <proof prover="0"><result status="timeout" time="1.000000" steps="145197"/></proof>
    <proof prover="1"><result status="timeout" time="1.000000" steps="176394"/></proof>
    <proof prover="2"><result status="timeout" time="1.000000" steps="8241"/></proof>
    <proof prover="3"><result status="timeout" time="1.000000" steps="1898935"/></proof>
    <transf name="split_vc" >
     <goal name="remove_preserves_order.0.0.0.0">
     <proof prover="0" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="335289"/></proof>
     <proof prover="1" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="344584"/></proof>
     <proof prover="2" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="34020"/></proof>
     <proof prover="3" timelimit="5" memlimit="2000"><result status="timeout" time="5.000000" steps="4527211"/></proof>
     <transf name="inline_goal" >
      <goal name="remove_preserves_order.0.0.0.0.0">
      <proof prover="0" timelimit="30" memlimit="4000"><undone/></proof>
      <proof prover="1" timelimit="30" memlimit="4000"><undone/></proof>
      <proof prover="2" timelimit="30" memlimit="4000"><undone/></proof>
      <proof prover="3" timelimit="30" memlimit="4000"><undone/></proof>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.acyclic_concat_with_list_of_unique_elements_is_acyclic" proved="true">
 <proof prover="0"><result status="timeout" time="1.000000" steps="149331"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="162383"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="6955"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1800160"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="acyclic_concat_with_list_of_unique_elements_is_acyclic.0" proved="true">
  <proof prover="2" timelimit="5" memlimit="2000"><result status="valid" time="2.521736" steps="18530"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.for_all&#39;vc" expl="VC for for_all" proved="true">
 <proof prover="2"><result status="valid" time="0.055638" steps="368"/></proof>
 </goal>
 <goal name="Make.is_candidate_valid&#39;vc" expl="VC for is_candidate_valid">
 <proof prover="0"><result status="timeout" time="1.000000" steps="168693"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="164363"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="10316"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1292157"/></proof>
 <transf name="split_vc" >
  <goal name="is_candidate_valid&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.025137" steps="45415"/></proof>
  </goal>
  <goal name="is_candidate_valid&#39;vc.1" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.693446" steps="7478"/></proof>
  </goal>
  <goal name="is_candidate_valid&#39;vc.2" expl="postcondition">
  <proof prover="0"><result status="timeout" time="1.000000" steps="90539"/></proof>
  <proof prover="1"><result status="timeout" time="1.000000" steps="171929"/></proof>
  <proof prover="2"><result status="timeout" time="1.000000" steps="9235"/></proof>
  <proof prover="3"><result status="timeout" time="1.000000" steps="1999468"/></proof>
  <transf name="split_vc" >
   <goal name="is_candidate_valid&#39;vc.2.0" expl="postcondition">
   <proof prover="0"><result status="timeout" time="1.000000" steps="160647"/></proof>
   <proof prover="1"><result status="timeout" time="1.000000" steps="198702"/></proof>
   <proof prover="2"><result status="timeout" time="1.000000" steps="7315"/></proof>
   <proof prover="3"><result status="timeout" time="1.000000" steps="1925157"/></proof>
   <transf name="split_vc" >
    <goal name="is_candidate_valid&#39;vc.2.0.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.042173" steps="191023"/></proof>
    </goal>
    <goal name="is_candidate_valid&#39;vc.2.0.1" expl="postcondition">
    <proof prover="0"><result status="timeout" time="1.000000" steps="159426"/></proof>
    <proof prover="1"><result status="timeout" time="1.000000" steps="136294"/></proof>
    <proof prover="2"><result status="timeout" time="1.000000" steps="8240"/></proof>
    <proof prover="3"><result status="timeout" time="1.000000" steps="2086746"/></proof>
    <transf name="split_vc" >
     <goal name="is_candidate_valid&#39;vc.2.0.1.0" expl="postcondition">
     <proof prover="0"><undone/></proof>
     <proof prover="1"><result status="timeout" time="1.000000" steps="126681"/></proof>
     <proof prover="2"><result status="timeout" time="1.000000" steps="6447"/></proof>
     <proof prover="3"><result status="timeout" time="1.000000" steps="1756377"/></proof>
     </goal>
     <goal name="is_candidate_valid&#39;vc.2.0.1.1" expl="postcondition" proved="true">
     <proof prover="3"><result status="valid" time="0.028348" steps="17074"/></proof>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
   <goal name="is_candidate_valid&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="0"><result status="timeout" time="1.000000" steps="180171"/></proof>
   <proof prover="1"><result status="timeout" time="1.000000" steps="155775"/></proof>
   <proof prover="2"><result status="timeout" time="1.000000" steps="8469"/></proof>
   <proof prover="3"><result status="timeout" time="1.000000" steps="2274873"/></proof>
   <transf name="split_vc" proved="true" >
    <goal name="is_candidate_valid&#39;vc.2.1.0" expl="postcondition" proved="true">
    <proof prover="3"><result status="valid" time="0.017087" steps="16073"/></proof>
    </goal>
    <goal name="is_candidate_valid&#39;vc.2.1.1" expl="postcondition" proved="true">
    <proof prover="2"><result status="valid" time="0.358983" steps="2080"/></proof>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.filter_heads&#39;vc" expl="VC for filter_heads" proved="true">
 <proof prover="0"><result status="timeout" time="1.000000" steps="128490"/></proof>
 <proof prover="1"><result status="timeout" time="1.000000" steps="143347"/></proof>
 <proof prover="2"><result status="timeout" time="1.000000" steps="9379"/></proof>
 <proof prover="3"><result status="timeout" time="1.000000" steps="1298930"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="filter_heads&#39;vc.0" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.034909" steps="43709"/></proof>
  </goal>
  <goal name="filter_heads&#39;vc.1" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.033158" steps="43685"/></proof>
  </goal>
  <goal name="filter_heads&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="0"><result status="timeout" time="1.000000" steps="110864"/></proof>
  <proof prover="1"><result status="timeout" time="1.000000" steps="183467"/></proof>
  <proof prover="2"><result status="timeout" time="1.000000" steps="8739"/></proof>
  <proof prover="3"><result status="timeout" time="1.000000" steps="1043084"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="filter_heads&#39;vc.2.0" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.044440" steps="204736"/></proof>
   </goal>
   <goal name="filter_heads&#39;vc.2.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.398408" steps="4410"/></proof>
   </goal>
   <goal name="filter_heads&#39;vc.2.2" expl="postcondition" proved="true">
   <proof prover="3"><result status="valid" time="0.089204" steps="231404"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="filter_heads&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="0"><result status="valid" time="0.170397" steps="37082"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.remove_head&#39;vc" expl="VC for remove_head" proved="true">
 <proof prover="2"><result status="valid" time="0.099920" steps="320"/></proof>
 </goal>
 <goal name="Make.remove_aux&#39;vc" expl="VC for remove_aux" proved="true">
 <proof prover="0" obsolete="true"><result status="timeout" time="1.000000" steps="121227"/></proof>
 <proof prover="1" obsolete="true"><result status="timeout" time="1.000000" steps="135603"/></proof>
 <proof prover="2" obsolete="true"><result status="timeout" time="1.000000" steps="6984"/></proof>
 <proof prover="3" obsolete="true"><result status="timeout" time="1.000000" steps="888707"/></proof>
 <transf name="split_vc" proved="true" >
  <goal name="remove_aux&#39;vc.0" expl="unreachable point" proved="true">
  <proof prover="3"><result status="valid" time="0.028140" steps="16068"/></proof>
  </goal>
  <goal name="remove_aux&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.192966" steps="411376"/></proof>
  </goal>
  <goal name="remove_aux&#39;vc.2" expl="variant decrease" proved="true">
  <proof prover="3"><result status="valid" time="0.031437" steps="42280"/></proof>
  </goal>
  <goal name="remove_aux&#39;vc.3" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.025821" steps="16086"/></proof>
  </goal>
  <goal name="remove_aux&#39;vc.4" expl="precondition" proved="true">
  <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="2.540638" steps="267792"/></proof>
  </goal>
  <goal name="remove_aux&#39;vc.5" expl="precondition" proved="true">
  <proof prover="2"><result status="valid" time="0.101551" steps="331"/></proof>
  </goal>
  <goal name="remove_aux&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.031507" steps="24112"/></proof>
  </goal>
  <goal name="remove_aux&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.000000" steps="185457"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.000000" steps="158534"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.000000" steps="5928"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="1.000000" steps="1357607"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="remove_aux&#39;vc.7.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="1.209634" steps="8763"/></proof>
   </goal>
   <goal name="remove_aux&#39;vc.7.1" expl="postcondition" proved="true">
   <proof prover="0" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="427813"/></proof>
   <proof prover="1" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="504102"/></proof>
   <proof prover="2" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="41150"/></proof>
   <proof prover="3" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="4719196"/></proof>
   <transf name="inline_goal" proved="true" >
    <goal name="remove_aux&#39;vc.7.1.0" expl="postcondition" proved="true">
    <transf name="split_all_full" proved="true" >
     <goal name="remove_aux&#39;vc.7.1.0.0" expl="postcondition" proved="true">
     <proof prover="0" obsolete="true"><result status="timeout" time="1.000000" steps="161792"/></proof>
     <proof prover="1" obsolete="true"><result status="timeout" time="1.000000" steps="154393"/></proof>
     <proof prover="2" obsolete="true"><result status="timeout" time="1.000000" steps="11285"/></proof>
     <proof prover="3" obsolete="true"><result status="timeout" time="1.000000" steps="2726349"/></proof>
     <transf name="split_vc" proved="true" >
      <goal name="remove_aux&#39;vc.7.1.0.0.0" expl="postcondition" proved="true">
      <proof prover="0" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="402548"/></proof>
      <proof prover="1" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="4.285457" steps="359657"/></proof>
      <proof prover="2" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="5.000000" steps="28819"/></proof>
      <proof prover="3" timelimit="5" memlimit="2000" obsolete="true"><result status="timeout" time="4.167581" steps="4949298"/></proof>
      <transf name="inline_goal" proved="true" >
       <goal name="remove_aux&#39;vc.7.1.0.0.0.0" expl="postcondition" proved="true">
       <proof prover="2" timelimit="10" memlimit="4000"><result status="valid" time="8.590622" steps="56598"/></proof>
       </goal>
      </transf>
      </goal>
     </transf>
     </goal>
    </transf>
    </goal>
   </transf>
   </goal>
  </transf>
  </goal>
  <goal name="remove_aux&#39;vc.8" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.148283" steps="428"/></proof>
  </goal>
  <goal name="remove_aux&#39;vc.9" expl="postcondition" proved="true">
  <proof prover="0" obsolete="true"><result status="timeout" time="1.000000" steps="130221"/></proof>
  <proof prover="1" obsolete="true"><result status="timeout" time="1.000000" steps="139700"/></proof>
  <proof prover="2" obsolete="true"><result status="timeout" time="1.000000" steps="6176"/></proof>
  <proof prover="3" obsolete="true"><result status="timeout" time="1.000000" steps="1335652"/></proof>
  <transf name="split_vc" proved="true" >
   <goal name="remove_aux&#39;vc.9.0" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.051014" steps="216"/></proof>
   </goal>
   <goal name="remove_aux&#39;vc.9.1" expl="postcondition" proved="true">
   <proof prover="2"><result status="valid" time="0.217688" steps="809"/></proof>
   </goal>
  </transf>
  </goal>
 </transf>
 </goal>
 <goal name="Make.remove&#39;vc" expl="VC for remove" proved="true">
 <transf name="split_vc" proved="true" >
  <goal name="remove&#39;vc.0" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.047122" steps="17703"/></proof>
  </goal>
  <goal name="remove&#39;vc.1" expl="precondition" proved="true">
  <proof prover="3"><result status="valid" time="0.124135" steps="201119"/></proof>
  </goal>
  <goal name="remove&#39;vc.2" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.125590" steps="263909"/></proof>
  </goal>
  <goal name="remove&#39;vc.3" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.073383" steps="195425"/></proof>
  </goal>
  <goal name="remove&#39;vc.4" expl="postcondition" proved="true">
  <proof prover="2"><result status="valid" time="0.098377" steps="251"/></proof>
  </goal>
  <goal name="remove&#39;vc.5" expl="postcondition" proved="true">
  <transf name="split_vc" proved="true" >
   <goal name="remove&#39;vc.5.0" expl="postcondition" proved="true">
   <proof prover="1" timelimit="10" memlimit="4000"><result status="valid" time="3.040703" steps="464143"/></proof>
   </goal>
  </transf>
  </goal>
  <goal name="remove&#39;vc.6" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.050517" steps="84215"/></proof>
  </goal>
  <goal name="remove&#39;vc.7" expl="postcondition" proved="true">
  <proof prover="3"><result status="valid" time="0.027283" steps="17661"/></proof>
  </goal>
 </transf>
 </goal>
 <goal name="Make.merge&#39;vc" expl="VC for merge">
 </goal>
 <goal name="Make.c3_linearization&#39;vc" expl="VC for c3_linearization">
 </goal>
</theory>
</file>
</why3session>
